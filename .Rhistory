# 遺伝率(全分散に占める遺伝要因分散の割合)
herit <- 0.5
# 有病率
prev <- 0.1
# 0世代の独立個人数
n.init <- 10
# 家系図を膨らませる処理ステップ数
n.iter <- 50
# 平均子供数
mean.kid <-2
my.ped <- my.pedigree(n.init=n.init,n.iter=n.iter,mean.kid=mean.kid)
aff.pedigree <- make.affected.pedigree(my.ped,p.g,r.g,herit,prev)
# 性別が-1,1になっていることを修正しつつ
# kinship2パッケージの家系図描図関数を使う
library(kinship2)
# trio行列は１行に１人
# 第１列は個人ID
# 第２列は父親ID(0は情報なし)
# 第３列は母親ID
# 第４列は性別(1:male,-1:female)
# 第５列は世代番号
# 第６列は情報(たとえば、着目アレルの本数)
# 1 第0世代にn.init人を作成する
# 初期n.init人の性別はランダムに与える
# 次いで、指定人数 n.iter人を次の要領で付け加える
# すでに登録された個人から一人xを選ぶ
# xが誰の親でもないときには、新たな配偶者を同世代に1人作成し
# そのペアの間に、平均子供数mean.kidでポアソン分布に従う子供を作る
# すでに子供が居る場合で、親が居ない場合には、両親を１世代上に作成する
# すでに子供が居て親もいるときは何もしない
my.pedigree <- function(n.init=3,n.iter=20,mean.kid=2){
trio <- matrix(0,n.init,5)
m <- length(trio[1,])
trio[1:n.init,1] <- 1:n.init
trio[1:n.init,4] <- sample(c(-1,1),n.init,replace=TRUE)
trio[,5] <- 0
cnt <- n.init
# 「子がいる場合」の「子の数の平均」がmean.kidなので、ポアソン分布に渡すパラメタはmean.kidより小さい
tmp.f <- function(m,k){
(m/(1-exp(-m))-k)^2
}
xmin <- optimize(tmp.f, c(0, mean.kid), tol = 0.0001, k = mean.kid)
mean.kid. <- xmin[[1]]
for(i in 1:n.iter){
s <- sample(trio[,1],1)
if(length(which(trio[,2:3]==s))==0){
# 子がいない(相手がいない)
trio <- rbind(trio,c(cnt+1,rep(0,m-1)))
dp <- dpois(1:100,mean.kid.)
dp <- dp/sum(dp)
num.kids <- sample(1:100,1,prob=dp)
tmp <- matrix(0,num.kids,m)
tmp[,1] <- cnt+1+(1:num.kids)
if(trio[s,4]==1){
tmp[,2] <- s
tmp[,3] <- cnt+1
}else{
tmp[,2] <- cnt+1
tmp[,3] <- s
}
tmp[,4] <- sample(c(-1,1),num.kids,replace=TRUE)
tmp[,5] <- trio[s,5] + 1
trio <- rbind(trio,tmp)
trio[cnt+1,4] <- -trio[s,4]
trio[cnt+1,5] <- trio[s,5]
cnt <- cnt+1+num.kids
}else if(trio[s,2] == 0 & trio[s,3] == 0){
# 親登録がない
trio <- rbind(trio,c(cnt+1,rep(0,m-1)))
trio <- rbind(trio,c(cnt+2,rep(0,m-1)))
trio[cnt+1,4] <- 1
trio[cnt+2,4] <- -1
trio[c(cnt+1,cnt+2),5] <- trio[s,5]-1
trio[s,2] <- cnt+1
trio[s,3] <- cnt+2
cnt <- cnt+2
}
}
trio
}
make.genotype <- function(trio,prob){
ret <- rep(0,length(trio[,1]))
# 家系図の個人を世代の降順に
ord <- order(trio[,5])
# 親がいなければ、集団の確率で
# 親がいればメンデルの法則で
for(i in 1:length(ord)){
if(trio[ord[i],2]==0 & trio[ord[i],3]==0){
ret[ord[i]] <- sample(c(0,1,2),1,prob=prob)
}else{
parents <- trio[ord[i],2:3]
pat <- ret[trio[ord[i],2]]/2
mat <- ret[trio[ord[i],3]]/2
if(pat==0.5){
pat <- sample(c(0,1),1)
}
if(mat==0.5){
mat <- sample(c(0,1),1)
}
ret[ord[i]] <- pat+mat
}
}
ret
}
make.affected.pedigree <- function(trio,p.g,r.g,h,prev,n.loci=1){
# n.lociのジェノタイプを作る
genotype <- matrix(0,length(trio[,1]),n.loci)
for(i in 1:n.loci){
genotype[,i] <- make.genotype(trio,p.g[i,])
}
# ジェノタイプ別リスクで個人リスクの総和を計算する
R.mat <- genotype
for(i in 1:n.loci){
tmp <- r.g[i,]
R.mat[,i] <- tmp[genotype[,i]+1]
}
R.sum <- apply(R.mat,1,sum)
var.R <- var(R.sum)
var.E <- var.R*(1-herit)/herit
E <- rnorm(length(trio[,1]),0,sqrt(var.E))
R.E <- R.sum + E
affected <- rep(0,length(trio[,1]))
affected[which(R.E> quantile(R.E,1-prev))] <- 1
return(list(pedigree=trio,genotype=genotype,gen.risk.mat=R.mat,gen.risk=R.sum,affected=affected))
}
make.affected.pedigree <- function(trio,p.g,r.g,h,prev,n.loci=1){
# n.lociのジェノタイプを作る
genotype <- matrix(0,length(trio[,1]),n.loci)
for(i in 1:n.loci){
genotype[,i] <- make.genotype(trio,p.g[i,])
}
# ジェノタイプ別リスクで個人リスクの総和を計算する
R.mat <- genotype
for(i in 1:n.loci){
tmp <- r.g[i,]
R.mat[,i] <- tmp[genotype[,i]+1]
}
R.sum <- apply(R.mat,1,sum)
var.R <- var(R.sum)
var.E <- var.R*(1-herit)/herit
E <- rnorm(length(trio[,1]),0,sqrt(var.E))
R.E <- R.sum + E
affected <- rep(0,length(trio[,1]))
affected[which(R.E> quantile(R.E,1-prev))] <- 1
return(list(pedigree=trio,genotype=genotype,gen.risk.mat=R.mat,gen.risk=R.sum,affected=affected))
}
# n.loci個のリスク座位
n.loci <- 10
# それらのアレル頻度とHWEを仮定したジェノタイプ頻度
## 適当にアレル頻度を発生させて
p.a <- runif(n.loci)*0.1
## HWEに従うジェノタイプ頻度を作成
p.g <- cbind(p.a^2,2*p.a*(1-p.a),(1-p.a)^2)
# 各座位のジェノタイプ別リスク
## １強、n.loci-1弱のリスク設定
r.a <- c(10,rep(1,n.loci-1))
r.g <- cbind(r.a*2+1,r.a+1,rep(1,n.loci))
# 遺伝率(全分散に占める遺伝要因分散の割合)
herit <- 0.5
# 有病率
prev <- 0.1
# 0世代の独立個人数
n.init <- 10
# 家系図を膨らませる処理ステップ数
n.iter <- 50
# 平均子供数
mean.kid <-2
my.ped <- my.pedigree(n.init=n.init,n.iter=n.iter,mean.kid=mean.kid)
aff.pedigree <- make.affected.pedigree(my.ped,p.g,r.g,herit,prev)
# 性別が-1,1になっていることを修正しつつ
# kinship2パッケージの家系図描図関数を使う
library(kinship2)
plot.affected.pedigree <- function(ap){
sex <- ap$pedigree[,4]
sex[which(sex==-1)] <- 2
my.ped <- pedigree(ap$pedigree[,1],ap$pedigree[,2],ap$pedigree[,3],sex,ap$affected)
plot(my.ped,symbolosize=0.001)
}
# 作成家系図情報行列から、親子関係エッジのリストを作成する
# そのための関数
el.from.trio <- function(trio){
non.zero <- which(apply((trio[,2:3])^2,1,sum)!=0)
el <- rbind(cbind(trio[non.zero,2],trio[non.zero,1]),cbind(trio[non.zero,3],trio[non.zero,1]))
el
}
library(igraph)
# trio行列は１行に１人
# 第１列は個人ID
# 第２列は父親ID(0は情報なし)
# 第３列は母親ID
# 第４列は性別(1:male,-1:female)
# 第５列は世代番号
# 第６列は情報(たとえば、着目アレルの本数)
# 1 第0世代にn.init人を作成する
# 初期n.init人の性別はランダムに与える
# 次いで、指定人数 n.iter人を次の要領で付け加える
# すでに登録された個人から一人xを選ぶ
# xが誰の親でもないときには、新たな配偶者を同世代に1人作成し
# そのペアの間に、平均子供数mean.kidでポアソン分布に従う子供を作る
# すでに子供が居る場合で、親が居ない場合には、両親を１世代上に作成する
# すでに子供が居て親もいるときは何もしない
my.pedigree <- function(n.init=3,n.iter=20,mean.kid=2){
trio <- matrix(0,n.init,5)
m <- length(trio[1,])
trio[1:n.init,1] <- 1:n.init
trio[1:n.init,4] <- sample(c(-1,1),n.init,replace=TRUE)
trio[,5] <- 0
cnt <- n.init
# 「子がいる場合」の「子の数の平均」がmean.kidなので、ポアソン分布に渡すパラメタはmean.kidより小さい
tmp.f <- function(m,k){
(m/(1-exp(-m))-k)^2
}
xmin <- optimize(tmp.f, c(0, mean.kid), tol = 0.0001, k = mean.kid)
mean.kid. <- xmin[[1]]
for(i in 1:n.iter){
s <- sample(trio[,1],1)
if(length(which(trio[,2:3]==s))==0){
# 子がいない(相手がいない)
trio <- rbind(trio,c(cnt+1,rep(0,m-1)))
dp <- dpois(1:100,mean.kid.)
dp <- dp/sum(dp)
num.kids <- sample(1:100,1,prob=dp)
tmp <- matrix(0,num.kids,m)
tmp[,1] <- cnt+1+(1:num.kids)
if(trio[s,4]==1){
tmp[,2] <- s
tmp[,3] <- cnt+1
}else{
tmp[,2] <- cnt+1
tmp[,3] <- s
}
tmp[,4] <- sample(c(-1,1),num.kids,replace=TRUE)
tmp[,5] <- trio[s,5] + 1
trio <- rbind(trio,tmp)
trio[cnt+1,4] <- -trio[s,4]
trio[cnt+1,5] <- trio[s,5]
cnt <- cnt+1+num.kids
}else if(trio[s,2] == 0 & trio[s,3] == 0){
# 親登録がない
trio <- rbind(trio,c(cnt+1,rep(0,m-1)))
trio <- rbind(trio,c(cnt+2,rep(0,m-1)))
trio[cnt+1,4] <- 1
trio[cnt+2,4] <- -1
trio[c(cnt+1,cnt+2),5] <- trio[s,5]-1
trio[s,2] <- cnt+1
trio[s,3] <- cnt+2
cnt <- cnt+2
}
}
trio
}
make.genotype <- function(trio,prob){
ret <- rep(0,length(trio[,1]))
# 家系図の個人を世代の降順に
ord <- order(trio[,5])
# 親がいなければ、集団の確率で
# 親がいればメンデルの法則で
for(i in 1:length(ord)){
if(trio[ord[i],2]==0 & trio[ord[i],3]==0){
ret[ord[i]] <- sample(c(0,1,2),1,prob=prob)
}else{
parents <- trio[ord[i],2:3]
pat <- ret[trio[ord[i],2]]/2
mat <- ret[trio[ord[i],3]]/2
if(pat==0.5){
pat <- sample(c(0,1),1)
}
if(mat==0.5){
mat <- sample(c(0,1),1)
}
ret[ord[i]] <- pat+mat
}
}
ret
}
make.affected.pedigree <- function(trio,p.g,r.g,h,prev,n.loci=1){
# n.lociのジェノタイプを作る
genotype <- matrix(0,length(trio[,1]),n.loci)
for(i in 1:n.loci){
genotype[,i] <- make.genotype(trio,p.g[i,])
}
# ジェノタイプ別リスクで個人リスクの総和を計算する
R.mat <- genotype
for(i in 1:n.loci){
tmp <- r.g[i,]
R.mat[,i] <- tmp[genotype[,i]+1]
}
R.sum <- apply(R.mat,1,sum)
var.R <- var(R.sum)
var.E <- var.R*(1-herit)/herit
E <- rnorm(length(trio[,1]),0,sqrt(var.E))
R.E <- R.sum + E
affected <- rep(0,length(trio[,1]))
affected[which(R.E> quantile(R.E,1-prev))] <- 1
return(list(pedigree=trio,genotype=genotype,gen.risk.mat=R.mat,gen.risk=R.sum,affected=affected))
}
make.affected.pedigree <- function(trio,p.g,r.g,h,prev,n.loci=1){
# n.lociのジェノタイプを作る
genotype <- matrix(0,length(trio[,1]),n.loci)
for(i in 1:n.loci){
genotype[,i] <- make.genotype(trio,p.g[i,])
}
# ジェノタイプ別リスクで個人リスクの総和を計算する
R.mat <- genotype
for(i in 1:n.loci){
tmp <- r.g[i,]
R.mat[,i] <- tmp[genotype[,i]+1]
}
R.sum <- apply(R.mat,1,sum)
var.R <- var(R.sum)
var.E <- var.R*(1-herit)/herit
E <- rnorm(length(trio[,1]),0,sqrt(var.E))
R.E <- R.sum + E
affected <- rep(0,length(trio[,1]))
affected[which(R.E> quantile(R.E,1-prev))] <- 1
return(list(pedigree=trio,genotype=genotype,gen.risk.mat=R.mat,gen.risk=R.sum,affected=affected))
}
# n.loci個のリスク座位
n.loci <- 10
# それらのアレル頻度とHWEを仮定したジェノタイプ頻度
## 適当にアレル頻度を発生させて
p.a <- runif(n.loci)*0.1
## HWEに従うジェノタイプ頻度を作成
p.g <- cbind(p.a^2,2*p.a*(1-p.a),(1-p.a)^2)
# 各座位のジェノタイプ別リスク
## １強、n.loci-1弱のリスク設定
r.a <- c(10,rep(1,n.loci-1))
r.g <- cbind(r.a*2+1,r.a+1,rep(1,n.loci))
# 遺伝率(全分散に占める遺伝要因分散の割合)
herit <- 0.5
# 有病率
prev <- 0.1
# 0世代の独立個人数
n.init <- 10
# 家系図を膨らませる処理ステップ数
n.iter <- 50
# 平均子供数
mean.kid <-2
my.ped <- my.pedigree(n.init=n.init,n.iter=n.iter,mean.kid=mean.kid)
aff.pedigree <- make.affected.pedigree(my.ped,p.g,r.g,herit,prev)
# 性別が-1,1になっていることを修正しつつ
# kinship2パッケージの家系図描図関数を使う
library(kinship2)
plot.affected.pedigree <- function(ap){
sex <- ap$pedigree[,4]
sex[which(sex==-1)] <- 2
my.ped <- pedigree(ap$pedigree[,1],ap$pedigree[,2],ap$pedigree[,3],sex,ap$affected)
plot(my.ped,symbolosize=0.001)
}
# 作成家系図情報行列から、親子関係エッジのリストを作成する
# そのための関数
el.from.trio <- function(trio){
non.zero <- which(apply((trio[,2:3])^2,1,sum)!=0)
el <- rbind(cbind(trio[non.zero,2],trio[non.zero,1]),cbind(trio[non.zero,3],trio[non.zero,1]))
el
}
library(igraph)
el <- el.from.trio(my.ped)
# エッジリストからグラフオブジェクトを作る
g <- graph.edgelist(el)
# 男女で色分け
plot(g,vertex.color=aff.pedigree$pedigree[,4]+3)
# 疾病フェノタイプで色分け
plot(g,vertex.color=aff.pedigree$affected+1)
plot(g,vertex.color=aff.pedigree$affected+1)
p <- seq(from=0,to=1,length=101)
p <- p[-1]
p <- p[-100]
H <- -p*log(p)+(1-p)*log(1-p)
plot(p,H,xlab="p",ylab="エントロピー")
p <- seq(from=0,to=1,length=101)
p <- p[-1]
p <- p[-100]
H <- -(p*log(p)+(1-p)*log(1-p))
plot(p,H,xlab="p",ylab="エントロピー")
s1 <- 0
f1 <- 0
F1 <- dbeta(p,s1+1,f1+1)
s2 <- 10
f2 <- 8
F2 <- dbeta(p,s2+1,f2+1)
matplot(p,cbind(F1,F2),type="l")
plot(p,cbind(-F1*log(F1),-F2*log(F2)),type="l")
s1 <- 0
f1 <- 0
F1 <- dbeta(p,s1+1,f1+1)
s2 <- 10
f2 <- 8
F2 <- dbeta(p,s2+1,f2+1)
matplot(p,cbind(F1,F2),type="l")
matplot(p,cbind(-F1*log(F1),-F2*log(F2)),type="l")
knitr::opts_chunk$set(echo = TRUE)
X <- c(0,1,2)
Y <- c(0,1,1)
plot(X,Y,pch=20,cex=3,xlab="X: Genotype",ylab="Y: Phenotype")
plot(X,Y,pch=20,cex=3,xlab="X: Genotype",ylab="Y: Phenotype")
x <- seq(from=-0.5,to=2.5,length=10000)
a <- 100
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l")
a <- 10
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=2)
a <- 100
b <- 0.7
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=3)
plot(X,Y,pch=20,cex=3,xlab="X: Genotype",ylab="Y: Phenotype")
x <- seq(from=-0.5,to=2.5,length=10000)
a <- 100
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l")
a <- 10
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=2)
a <- 100
b <- 0.7
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=3)
plot(X,Y,pch=20,cex=3,xlab="X: Genotype",ylab="Y: Probability to develpt disease")
x <- seq(from=-0.5,to=2.5,length=10000)
a <- 100
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l")
a <- 10
b <- 1
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=2)
a <- 100
b <- 0.7
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=3)
X <- 0:2
Y <- X * 0.5
plot(X,Y,pch=20,cex=3,xlab="X: Genotype",ylab="Y: Probability to develpt disease")
x <- seq(from=-0.5,to=2.5,length=10000)
a <- 100
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l")
a <- 10
b <- 1
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=2)
a <- 100
b <- 0.7
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=3)
X <- 0:2
Y <- X * 0.5
plot(X,Y,pch=20,cex=3,xlab="X: Genotype",ylab="Y: Probability to develpt disease")
x <- seq(from=-0.5,to=2.5,length=10000)
a <- 100
b <- 0.5
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l")
points(1,1,pch=20,cex=2,col=4)
a <- 10
b <- 1
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=2)
points(1,1,pch=20,cex=2,col=4)
a <- 100
b <- 0.7
y <- exp((x-b)*a)/(exp((x-b)*a)+1)
points(x,y,type="l",col=3)
points(1,1,pch=20,cex=2,col=4)
par(mfrow=c(2,5))
n.loci <- 1:10
for(i in n.loci){
n <- 0:i
d <- dbinom(n,i,0.5)
plot(n,d)
}
par(mfrow=c(1,1))
par(mfrow=c(2,5))
n.loci <- 1:10
for(i in n.loci){
n <- 0:i
d <- dbinom(n,i,0.5)
plot(n,d,type="l")
}
par(mfrow=c(1,1))
par(mfrow=c(2,5))
n.loci <- 1:10
for(i in n.loci){
n <- 0:i
d <- dbinom(n,i,0.5)
plot(n,d,type="h")
}
par(mfrow=c(1,1))
par(mfrow=c(3,3))
n.loci <- 1:9
for(i in n.loci){
n <- 0:i
d <- dbinom(n,i,0.5)
plot(n,d,type="h")
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
n.loci <- 1:6
for(i in n.loci){
n <- 0:i
d <- dbinom(n,i,0.5)
plot(n,d,type="h")
}
par(mfrow=c(1,1))
